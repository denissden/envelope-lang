/*! Envelope lang v1.1.0 (https://nvlp.dev) | Copyright (c) 2024 Envelope lang project and Contributors | Licensed under the MIT license */(()=>{"use strict";var t={41:(t,e,r)=>{var o=r(655),n=r(68),a=r(675),i=r(795);t.exports=function(t,e,r){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new a("`obj` must be an object or a function`");if("string"!=typeof e&&"symbol"!=typeof e)throw new a("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new a("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new a("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new a("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new a("`loose`, if provided, must be a boolean");var p=arguments.length>3?arguments[3]:null,l=arguments.length>4?arguments[4]:null,y=arguments.length>5?arguments[5]:null,c=arguments.length>6&&arguments[6],u=!!i&&i(t,e);if(o)o(t,e,{configurable:null===y&&u?u.configurable:!y,enumerable:null===p&&u?u.enumerable:!p,value:r,writable:null===l&&u?u.writable:!l});else{if(!c&&(p||l||y))throw new n("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");t[e]=r}}},452:(t,e,r)=>{var o=r(189),n="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),a=Object.prototype.toString,i=Array.prototype.concat,p=r(41),l=r(592)(),y=function(t,e,r,o){if(e in t)if(!0===o){if(t[e]===r)return}else if("function"!=typeof(n=o)||"[object Function]"!==a.call(n)||!o())return;var n;l?p(t,e,r,!0):p(t,e,r)},c=function(t,e){var r=arguments.length>2?arguments[2]:{},a=o(e);n&&(a=i.call(a,Object.getOwnPropertySymbols(e)));for(var p=0;p<a.length;p+=1)y(t,a[p],e[a[p]],r[a[p]])};c.supportsDescriptors=!!l,t.exports=c},655:(t,e,r)=>{var o=r(453)("%Object.defineProperty%",!0)||!1;if(o)try{o({},"a",{value:1})}catch(t){o=!1}t.exports=o},237:t=>{t.exports=EvalError},383:t=>{t.exports=Error},290:t=>{t.exports=RangeError},538:t=>{t.exports=ReferenceError},68:t=>{t.exports=SyntaxError},675:t=>{t.exports=TypeError},345:t=>{t.exports=URIError},353:t=>{var e=Object.prototype.toString,r=Math.max,o=function(t,e){for(var r=[],o=0;o<t.length;o+=1)r[o]=t[o];for(var n=0;n<e.length;n+=1)r[n+t.length]=e[n];return r};t.exports=function(t){var n=this;if("function"!=typeof n||"[object Function]"!==e.apply(n))throw new TypeError("Function.prototype.bind called on incompatible "+n);for(var a,i=function(t,e){for(var r=[],o=e||0,n=0;o<t.length;o+=1,n+=1)r[n]=t[o];return r}(arguments,1),p=r(0,n.length-i.length),l=[],y=0;y<p;y++)l[y]="$"+y;if(a=Function("binder","return function ("+function(t,e){for(var r="",o=0;o<t.length;o+=1)r+=t[o],o+1<t.length&&(r+=e);return r}(l,",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof a){var e=n.apply(this,o(i,arguments));return Object(e)===e?e:this}return n.apply(t,o(i,arguments))})),n.prototype){var c=function(){};c.prototype=n.prototype,a.prototype=new c,c.prototype=null}return a}},743:(t,e,r)=>{var o=r(353);t.exports=Function.prototype.bind||o},453:(t,e,r)=>{var o,n=r(383),a=r(237),i=r(290),p=r(538),l=r(68),y=r(675),c=r(345),u=Function,f=function(t){try{return u('"use strict"; return ('+t+").constructor;")()}catch(t){}},s=Object.getOwnPropertyDescriptor;if(s)try{s({},"")}catch(t){s=null}var b=function(){throw new y},d=s?function(){try{return b}catch(t){try{return s(arguments,"callee").get}catch(t){return b}}}():b,g=r(39)(),h=r(24)(),v=Object.getPrototypeOf||(h?function(t){return t.__proto__}:null),m={},A="undefined"!=typeof Uint8Array&&v?v(Uint8Array):o,w={__proto__:null,"%AggregateError%":"undefined"==typeof AggregateError?o:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?o:ArrayBuffer,"%ArrayIteratorPrototype%":g&&v?v([][Symbol.iterator]()):o,"%AsyncFromSyncIteratorPrototype%":o,"%AsyncFunction%":m,"%AsyncGenerator%":m,"%AsyncGeneratorFunction%":m,"%AsyncIteratorPrototype%":m,"%Atomics%":"undefined"==typeof Atomics?o:Atomics,"%BigInt%":"undefined"==typeof BigInt?o:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?o:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?o:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?o:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":n,"%eval%":eval,"%EvalError%":a,"%Float32Array%":"undefined"==typeof Float32Array?o:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?o:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?o:FinalizationRegistry,"%Function%":u,"%GeneratorFunction%":m,"%Int8Array%":"undefined"==typeof Int8Array?o:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?o:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?o:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":g&&v?v(v([][Symbol.iterator]())):o,"%JSON%":"object"==typeof JSON?JSON:o,"%Map%":"undefined"==typeof Map?o:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&g&&v?v((new Map)[Symbol.iterator]()):o,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?o:Promise,"%Proxy%":"undefined"==typeof Proxy?o:Proxy,"%RangeError%":i,"%ReferenceError%":p,"%Reflect%":"undefined"==typeof Reflect?o:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?o:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&g&&v?v((new Set)[Symbol.iterator]()):o,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?o:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":g&&v?v(""[Symbol.iterator]()):o,"%Symbol%":g?Symbol:o,"%SyntaxError%":l,"%ThrowTypeError%":d,"%TypedArray%":A,"%TypeError%":y,"%Uint8Array%":"undefined"==typeof Uint8Array?o:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?o:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?o:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?o:Uint32Array,"%URIError%":c,"%WeakMap%":"undefined"==typeof WeakMap?o:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?o:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?o:WeakSet};if(v)try{null.error}catch(t){var P=v(v(t));w["%Error.prototype%"]=P}var S=function t(e){var r;if("%AsyncFunction%"===e)r=f("async function () {}");else if("%GeneratorFunction%"===e)r=f("function* () {}");else if("%AsyncGeneratorFunction%"===e)r=f("async function* () {}");else if("%AsyncGenerator%"===e){var o=t("%AsyncGeneratorFunction%");o&&(r=o.prototype)}else if("%AsyncIteratorPrototype%"===e){var n=t("%AsyncGenerator%");n&&v&&(r=v(n.prototype))}return w[e]=r,r},O={__proto__:null,"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},j=r(743),x=r(957),E=j.call(Function.call,Array.prototype.concat),F=j.call(Function.apply,Array.prototype.splice),I=j.call(Function.call,String.prototype.replace),_=j.call(Function.call,String.prototype.slice),U=j.call(Function.call,RegExp.prototype.exec),R=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,k=/\\(\\)?/g,$=function(t,e){var r,o=t;if(x(O,o)&&(o="%"+(r=O[o])[0]+"%"),x(w,o)){var n=w[o];if(n===m&&(n=S(o)),void 0===n&&!e)throw new y("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:r,name:o,value:n}}throw new l("intrinsic "+t+" does not exist!")};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new y("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new y('"allowMissing" argument must be a boolean');if(null===U(/^%?[^%]*%?$/,t))throw new l("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var r=function(t){var e=_(t,0,1),r=_(t,-1);if("%"===e&&"%"!==r)throw new l("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==e)throw new l("invalid intrinsic syntax, expected opening `%`");var o=[];return I(t,R,(function(t,e,r,n){o[o.length]=r?I(n,k,"$1"):e||t})),o}(t),o=r.length>0?r[0]:"",n=$("%"+o+"%",e),a=n.name,i=n.value,p=!1,c=n.alias;c&&(o=c[0],F(r,E([0,1],c)));for(var u=1,f=!0;u<r.length;u+=1){var b=r[u],d=_(b,0,1),g=_(b,-1);if(('"'===d||"'"===d||"`"===d||'"'===g||"'"===g||"`"===g)&&d!==g)throw new l("property names with quotes must have matching quotes");if("constructor"!==b&&f||(p=!0),x(w,a="%"+(o+="."+b)+"%"))i=w[a];else if(null!=i){if(!(b in i)){if(!e)throw new y("base intrinsic for "+t+" exists, but the property is not available.");return}if(s&&u+1>=r.length){var h=s(i,b);i=(f=!!h)&&"get"in h&&!("originalValue"in h.get)?h.get:i[b]}else f=x(i,b),i=i[b];f&&!p&&(w[a]=i)}}return i}},820:t=>{"undefined"!=typeof self?t.exports=self:"undefined"!=typeof window?t.exports=window:t.exports=Function("return this")()},170:(t,e,r)=>{var o=r(452),n=r(820),a=r(323),i=r(61),p=a(),l=function(){return p};o(l,{getPolyfill:a,implementation:n,shim:i}),t.exports=l},323:(t,e,r)=>{var o=r(820);t.exports=function(){return"object"==typeof r.g&&r.g&&r.g.Math===Math&&r.g.Array===Array?r.g:o}},61:(t,e,r)=>{var o=r(452),n=r(795),a=r(323);t.exports=function(){var t=a();if(o.supportsDescriptors){var e=n(t,"globalThis");e&&(!e.configurable||!e.enumerable&&e.writable&&globalThis===t)||Object.defineProperty(t,"globalThis",{configurable:!0,enumerable:!1,value:t,writable:!0})}else"object"==typeof globalThis&&globalThis===t||(t.globalThis=t);return t}},795:(t,e,r)=>{var o=r(453)("%Object.getOwnPropertyDescriptor%",!0);if(o)try{o([],"length")}catch(t){o=null}t.exports=o},592:(t,e,r)=>{var o=r(655),n=function(){return!!o};n.hasArrayLengthDefineBug=function(){if(!o)return null;try{return 1!==o([],"length",{value:1}).length}catch(t){return!0}},t.exports=n},24:t=>{var e={__proto__:null,foo:{}},r=Object;t.exports=function(){return{__proto__:e}.foo===e.foo&&!(e instanceof r)}},39:(t,e,r)=>{var o="undefined"!=typeof Symbol&&Symbol,n=r(333);t.exports=function(){return"function"==typeof o&&("function"==typeof Symbol&&("symbol"==typeof o("foo")&&("symbol"==typeof Symbol("bar")&&n())))}},333:t=>{t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var o=Object.getOwnPropertySymbols(t);if(1!==o.length||o[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var n=Object.getOwnPropertyDescriptor(t,e);if(42!==n.value||!0!==n.enumerable)return!1}return!0}},957:(t,e,r)=>{var o=Function.prototype.call,n=Object.prototype.hasOwnProperty,a=r(743);t.exports=a.call(o,n)},875:(t,e,r)=>{var o;if(!Object.keys){var n=Object.prototype.hasOwnProperty,a=Object.prototype.toString,i=r(93),p=Object.prototype.propertyIsEnumerable,l=!p.call({toString:null},"toString"),y=p.call((function(){}),"prototype"),c=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],u=function(t){var e=t.constructor;return e&&e.prototype===t},f={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},s=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!f["$"+t]&&n.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{u(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();o=function(t){var e=null!==t&&"object"==typeof t,r="[object Function]"===a.call(t),o=i(t),p=e&&"[object String]"===a.call(t),f=[];if(!e&&!r&&!o)throw new TypeError("Object.keys called on a non-object");var b=y&&r;if(p&&t.length>0&&!n.call(t,0))for(var d=0;d<t.length;++d)f.push(String(d));if(o&&t.length>0)for(var g=0;g<t.length;++g)f.push(String(g));else for(var h in t)b&&"prototype"===h||!n.call(t,h)||f.push(String(h));if(l)for(var v=function(t){if("undefined"==typeof window||!s)return u(t);try{return u(t)}catch(t){return!1}}(t),m=0;m<c.length;++m)v&&"constructor"===c[m]||!n.call(t,c[m])||f.push(c[m]);return f}}t.exports=o},189:(t,e,r)=>{var o=Array.prototype.slice,n=r(93),a=Object.keys,i=a?function(t){return a(t)}:r(875),p=Object.keys;i.shim=function(){if(Object.keys){var t=function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2);t||(Object.keys=function(t){return n(t)?p(o.call(t)):p(t)})}else Object.keys=i;return Object.keys||i},t.exports=i},93:t=>{var e=Object.prototype.toString;t.exports=function(t){var r=e.call(t),o="[object Arguments]"===r;return o||(o="[object Array]"!==r&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===e.call(t.callee)),o}},781:function(t,e,r){var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};function n(t){return"// envelope works\n"+t}Object.defineProperty(e,"__esModule",{value:!0}),e.compile=n,(0,o(r(170)).default)().envelope=n},156:function(t,e,r){var o=this&&this.__awaiter||function(t,e,r,o){return new(r||(r=Promise))((function(n,a){function i(t){try{l(o.next(t))}catch(t){a(t)}}function p(t){try{l(o.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(i,p)}l((o=o.apply(t,e||[])).next())}))},n=this&&this.__generator||function(t,e){var r,o,n,a={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]},i=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return i.next=p(0),i.throw=p(1),i.return=p(2),"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function p(p){return function(l){return function(p){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,p[0]&&(a=0)),a;)try{if(r=1,o&&(n=2&p[0]?o.return:p[0]?o.throw||((n=o.return)&&n.call(o),0):o.next)&&!(n=n.call(o,p[1])).done)return n;switch(o=0,n&&(p=[2&p[0],n.value]),p[0]){case 0:case 1:n=p;break;case 4:return a.label++,{value:p[1],done:!1};case 5:a.label++,o=p[1],p=[0];continue;case 7:p=a.ops.pop(),a.trys.pop();continue;default:if(!(n=a.trys,(n=n.length>0&&n[n.length-1])||6!==p[0]&&2!==p[0])){a=0;continue}if(3===p[0]&&(!n||p[1]>n[0]&&p[1]<n[3])){a.label=p[1];break}if(6===p[0]&&a.label<n[1]){a.label=n[1],n=p;break}if(n&&a.label<n[2]){a.label=n[2],a.ops.push(p);break}n[2]&&a.ops.pop(),a.trys.pop();continue}p=e.call(t,a)}catch(t){p=[6,t],o=0}finally{r=n=0}if(5&p[0])throw p[1];return{value:p[0]?p[1]:void 0,done:!0}}([p,l])}}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(781);function i(t){return o(this,void 0,void 0,(function(){var e,r;return n(this,(function(o){switch(o.label){case 0:return null===t.parentNode?[3,3]:(r=t.textContent)?[3,2]:[4,p(t)];case 1:r=o.sent(),o.label=2;case 2:e=r,t.parentNode.removeChild(t),n=(0,a.compile)(e),(i=document.createElement("script")).innerHTML=n,document.body.appendChild(i),o.label=3;case 3:return[2]}var n,i}))}))}function p(t){return o(this,void 0,void 0,(function(){var e,r;return n(this,(function(o){switch(o.label){case 0:return e=t.getAttribute("src"),r="",null!==e&&e.length?[4,fetch(e,{method:"GET"})]:[3,3];case 1:return[4,o.sent().text()];case 2:r=o.sent(),o.label=3;case 3:return[2,r]}}))}))}"undefined"!=typeof window&&(document.querySelectorAll('[language="Envelope"]').forEach(i),document.querySelectorAll('[language="envelope"]').forEach(i),document.querySelectorAll('[language="Nvlp"]').forEach(i),document.querySelectorAll('[language="nvlp"]').forEach(i),document.querySelectorAll('[type="text/x-envelope"]').forEach(i),document.querySelectorAll('[type="text/x-nvlp"]').forEach(i))}},e={};function r(o){var n=e[o];if(void 0!==n)return n.exports;var a=e[o]={exports:{}};return t[o].call(a.exports,a,a.exports,r),a.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();r(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,